version: 2

before:
  hooks:
    - go mod tidy

builds:
  - id: codizen
    main: ./main.go
    binary: codizen
    env:
      - CGO_ENABLED=0
    goos: [linux, darwin, windows]
    goarch: [amd64, arm64]
    flags: [-trimpath]
    ldflags:
      - -s -w
      - -X main.version={{.Version}}  # (선택) main에 version 변수 있으면 주입

# archives:
  # esbuild 스타일: 아카이브(압축) 없이 **바이너리만 업로드**하려면 비워두세요.
  # 혹은 zip/tar.gz로 묶고 싶으면 아래처럼:
  # - id: codizen-archives
  #   format: binary

checksum:
  name_template: "SHA256SUMS.txt"
  algorithm: sha256

# signs:
  # (선택) cosign/gpg 서명 원하면 여기에 설정

release:
  draft: false
  # 고정 템플릿을 쓰되, npm-wrapper에서 기대하는 파일명과 맞춥니다.
  # GoReleaser는 기본적으로 <binary>_<os>_<arch> 형식을 쓰는데,
  # 아래 'universal_binaries' 또는 'name_template'로 파일명 커스텀 가능.
  # 여기서는 'blobs'로 업로드될 실제 파일명을 커스터마이즈하기 위해 'universal binaries' 대신 'artifacts' rename 사용.
  # 간단히 하기 위해 'blobs' 안 쓰고, 아래 'builds' + 'project_name' 조합을 활용:

project_name: codizen

# 파일명 커스터마이즈 (GoReleaser v2의 'builds' 이름 규칙 사용)
# 기본은 codizen_{os}_{arch} 이므로 npm 래퍼의 기대값에 맞추려면 릴리스 후 파일명을 바꾸거나,
# 아래 'brews' 등을 쓰지 말고, 설치 스크립트에서 파일명 매핑을 처리하세요.
# 파일명 규칙: npm wrapper가 codizen-darwin-arm64, codizen-linux-amd64, codizen-windows-amd64.exe를 기대하니,
# 가장 쉬운 방법은 설치 스크립트에서 이름 매핑하거나, GoReleaser의 name_template(v1 스타일)이나 후처리 스크립트를 이용해 이름을 codizen-{{ .Os }}-{{ .Arch }}로 바꿔주세요.
# (간단히 하려면 일단 기본 파일명으로 올리고, npm install.js에서 assetName 매핑을 추가하는 방식도 OK)